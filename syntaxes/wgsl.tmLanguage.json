{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "wgsl",
  "patterns": [
    {
      "include": "#preprocessor"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#babylon-keywords"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#struct-definitions"
    },
    {
      "include": "#data-types"
    },
    {
      "include": "#user-defined-types"
    },
    {
      "include": "#built-in-functions"
    },
    {
      "include": "#built-in-variables"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.include.wgsl",
          "begin": "^\\s*(#include)\\s*(<)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.include.wgsl"
            },
            "2": {
              "name": "punctuation.definition.string.begin.wgsl"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.wgsl"
            }
          },
          "patterns": [
            {
              "name": "string.quoted.other.lt-gt.include.wgsl",
              "match": "[^>]+"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.wgsl",
          "match": "//.*$"
        },
        {
          "name": "comment.block.wgsl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.wgsl",
          "match": "\\b(if|else|switch|case|default|break|continue|return|loop|while|for|discard)\\b"
        },
        {
          "name": "keyword.declaration.wgsl",
          "match": "\\b(const|let|var|override|fn|struct|enable|diagnostic)\\b"
        },
        {
          "name": "keyword.stage.wgsl",
          "match": "\\b(vertex|fragment|compute)\\b"
        }
      ]
    },
    "babylon-keywords": {
      "patterns": [
        {
          "name": "keyword.babylon.wgsl",
          "match": "\\b(varying|attribute|uniform)\\b"
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "storage.type.attribute.wgsl",
          "match": "@\\b(group|binding|location|builtin|workgroup_size|interpolate|vertex|fragment|compute)\\b"
        }
      ]
    },
    "struct-definitions": {
      "patterns": [
        {
          "name": "meta.struct.wgsl",
          "begin": "\\b(struct)\\s+([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.wgsl"
            },
            "2": {
              "name": "entity.name.type.struct.wgsl"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#attributes"
            },
            {
              "include": "#data-types"
            },
            {
              "include": "#user-defined-types"
            }
          ]
        }
      ]
    },
    "data-types": {
      "patterns": [
        {
          "name": "storage.type.primitive.wgsl",
          "match": "\\b(bool|i32|u32|f32|f16)\\b"
        },
        {
          "name": "storage.type.vector.wgsl",
          "match": "\\b(vec2|vec3|vec4)\\b"
        },
        {
          "name": "storage.type.matrix.wgsl",
          "match": "\\b(mat2x2|mat3x3|mat4x4|mat2x3|mat2x4|mat3x2|mat3x4|mat4x2|mat4x3)\\b"
        },
        {
          "name": "storage.type.complex.wgsl",
          "match": "\\b(array|ptr|atomic)\\b"
        }
      ]
    },
    "user-defined-types": {
      "patterns": [
        {
          "name": "entity.name.type.wgsl",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "built-in-functions": {
      "patterns": [
        {
          "name": "support.function.math.wgsl",
          "match": "\\b(abs|acos|acosh|all|any|asin|asinh|atan|atan2|atanh|ceil|clamp|cos|cosh|cross|degrees|determinant|distance|dot|exp|exp2|faceForward|floor|fma|fract|frexp|inverseSqrt|ldexp|length|log|log2|max|min|mix|modf|normalize|pow|radians|reflect|refract|round|saturate|sign|sin|sinh|smoothstep|sqrt|step|tan|tanh|transpose|trunc)\\b"
        },
        {
          "name": "support.function.texture.wgsl",
          "match": "\\b(textureSample|textureLoad|textureStore|textureDimensions|textureNumLayers|textureNumLevels|textureNumSamples)\\b"
        },
        {
          "name": "support.function.atomic.wgsl",
          "match": "\\b(atomicLoad|atomicStore|atomicAdd|atomicSub|atomicMax|atomicMin|atomicAnd|atomicOr|atomicXor|atomicExchange|atomicCompareExchangeWeak)\\b"
        },
        {
          "name": "support.function.derivative.wgsl",
          "match": "\\b(dpdx|dpdxCoarse|dpdxFine|dpdy|dpdyCoarse|dpdyFine|fwidth|fwidthCoarse|fwidthFine)\\b"
        },
        {
          "name": "support.function.logical.wgsl",
          "match": "\\b(select)\\b"
        }
      ]
    },
    "built-in-variables": {
      "patterns": [
        {
          "name": "support.variable.babylon.wgsl",
          "match": "\\b(vertexInputs|vertexOutputs|fragmentInputs|fragmentOutputs|uniforms)\\b"
        },
        {
          "name": "support.variable.builtin.wgsl",
          "match": "(?<=@builtin\\()\\s*(position|vertex_index|instance_index|front_facing|frag_depth|local_invocation_id|local_invocation_index|global_invocation_id|workgroup_id|num_workgroups)\\s*(?=\\))"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.wgsl",
          "match": "\\b([0-9]+\\.?[0-9]*([eE][+-]?[0-9]+)?[fh]?)\\b"
        },
        {
          "name": "constant.numeric.hex.wgsl",
          "match": "\\b(0[xX][0-9a-fA-F]+[u]?)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.wgsl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.wgsl",
          "match": "\\\\."
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.wgsl",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.wgsl"
            },
            "2": {
              "name": "entity.name.function.wgsl"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#attributes"
            },
            {
              "include": "#data-types"
            },
            {
              "include": "#user-defined-types"
            }
          ]
        },
        {
          "name": "meta.function.call.wgsl",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.call.wgsl"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.variable.declaration.wgsl",
          "begin": "\\b(var|let|const)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.wgsl"
            },
            "2": {
              "name": "variable.name.wgsl"
            }
          },
          "end": "(?=[;=,\\)])",
          "patterns": [
            {
              "include": "#data-types"
            },
            {
              "include": "#user-defined-types"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.wgsl",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.comparison.wgsl",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.logical.wgsl",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.wgsl",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.assignment.wgsl",
          "match": "(=|\\+=|\\-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=)"
        }
      ]
    }
  },
  "scopeName": "main.wgsl"
}